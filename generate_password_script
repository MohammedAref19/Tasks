#!/bin/bash

# Function to display usage information
function display_usage {
    echo "Usage: $0 -l <LENGTH> -c <COMPLEXITY>"
    echo "Options:"
    echo "  -l, --length      Specify the length of the password"
    echo "  -c, --complexity  Specify the complexity of the password (low, medium, high)"
    exit 1
}

# Initialize variables
LENGTH=""
COMPLEXITY=""

# Process command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -l|--length)
            LENGTH="$2"
            shift 2
            ;;
        -c|--complexity)
            COMPLEXITY="$2"
            shift 2
            ;;
        *)
            display_usage
            ;;
    esac
done

# Check if required arguments are provided
if [ -z "$LENGTH" ] || [ -z "$COMPLEXITY" ]; then
    display_usage
fi

# Function to generate a random password
function generate_password {
    local complexity=$1
    local length=$2

    local low_chars="abcdefghijklmnopqrstuvwxyz"
    local medium_chars="${low_chars}ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    local high_chars="${medium_chars}0123456789!@#$%^&*()-=_+[]{}|;:'\",.<>?/"

    case "$complexity" in
        "low")
            chars="$low_chars"
            ;;
        "medium")
            chars="$medium_chars"
    ;;
        "high")
            chars="$high_chars"
            ;;
        *)
            echo "Invalid complexity. Choose 'low', 'medium', or 'high'."
            exit 1
            ;;
    esac

    password=""
    for ((i=0; i<$length; i++)); do
        random_char="${chars:RANDOM%${#chars}:1}"
        password="${password}${random_char}"
    done

    echo "Generated Password: $password"
}

# Main script

# Validate complexity
case "$COMPLEXITY" in
    "low"|"medium"|"high")
        ;;
    *)
        echo "Invalid complexity. Choose 'low', 'medium', or 'high'."
        exit 1
        ;;
esac

# Validate length
if ! [[ "$LENGTH" =~ ^[0-9]+$ ]]; then
    echo "Invalid length. Please provide a positive integer."
    exit 1
fi

# Generate the password
generate_password "$COMPLEXITY" "$LENGTH"
